# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      submission_folder:
        description: 'Submission folder to run (e.g., submission_a)'
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need to fetch previous commit to compare

      # Detect which submission folder has changes (only for push events)
      - name: Detect changed submission
        if: github.event_name == 'push'
        id: detect_submission
        run: |
          # Get changed files between HEAD and previous commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Find submissions folders that have changes
          CHANGED_SUBMISSIONS=$(echo "$CHANGED_FILES" | grep "^submissions/" | cut -d'/' -f2 | sort | uniq)
          SUBMISSION_COUNT=$(echo "$CHANGED_SUBMISSIONS" | wc -w)
          
          echo "Changed submissions: $CHANGED_SUBMISSIONS"
          echo "Number of changed submissions: $SUBMISSION_COUNT"
          
          # Check if exactly one submission folder has changes
          if [ "$SUBMISSION_COUNT" -eq 1 ] && [ -n "$CHANGED_SUBMISSIONS" ]; then
            echo "SUBMISSION_FOLDER=$CHANGED_SUBMISSIONS" >> $GITHUB_OUTPUT
            echo "RUN_BUILD=true" >> $GITHUB_OUTPUT
            echo "Will build submission: $CHANGED_SUBMISSIONS"
          else
            echo "RUN_BUILD=false" >> $GITHUB_OUTPUT
            if [ "$SUBMISSION_COUNT" -eq 0 ]; then
              echo "No submission folders changed - skipping build"
            else
              echo "Multiple submission folders changed - skipping build"
            fi
          fi

      # Set submission folder for manual workflow dispatch
      - name: Set submission folder for manual dispatch
        if: github.event_name == 'workflow_dispatch'
        id: manual_submission
        run: |
          SUBMISSION_FOLDER="${{ github.event.inputs.submission_folder }}"
          
          if [ -z "$SUBMISSION_FOLDER" ]; then
            echo "Error: submission_folder input is required for manual workflow dispatch"
            echo "Available submissions:"
            ls -1 submissions/ 2>/dev/null | grep -E '^submission_' || echo "No submissions found in submissions/ directory"
            exit 1
          fi
          
          # Check if submission folder exists
          if [ ! -d "submissions/$SUBMISSION_FOLDER" ]; then
            echo "Error: Submission folder 'submissions/$SUBMISSION_FOLDER' does not exist."
            echo "Available submissions:"
            ls -1 submissions/ 2>/dev/null | grep -E '^submission_' || echo "No submissions found in submissions/ directory"
            exit 1
          fi
          
          echo "SUBMISSION_FOLDER=$SUBMISSION_FOLDER" >> $GITHUB_OUTPUT
          echo "RUN_BUILD=true" >> $GITHUB_OUTPUT
          echo "Manual workflow dispatch - will build submission: $SUBMISSION_FOLDER"

      # Make run.sh executable and run it
      - name: Run submission using run.sh
        if: (github.event_name == 'push' && steps.detect_submission.outputs.RUN_BUILD == 'true') || (github.event_name == 'workflow_dispatch' && steps.manual_submission.outputs.RUN_BUILD == 'true')
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Determine which submission folder to use based on event type
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            SUBMISSION_FOLDER="${{ steps.manual_submission.outputs.SUBMISSION_FOLDER }}"
          else
            SUBMISSION_FOLDER="${{ steps.detect_submission.outputs.SUBMISSION_FOLDER }}"
          fi
          
          echo "Running submission using run.sh: $SUBMISSION_FOLDER"
          
          # Make run.sh executable
          chmod +x run.sh
          
          # Run the submission using run.sh
          ./run.sh $SUBMISSION_FOLDER
          
          echo "Submission execution completed successfully!"

      # Skip message for push events
      - name: Skip build message
        if: github.event_name == 'push' && steps.detect_submission.outputs.RUN_BUILD == 'false'
        run: |
          echo "Build skipped - changes must be in exactly one submission folder"

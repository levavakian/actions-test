# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need to fetch previous commit to compare

      # Detect which submission folder has changes
      - name: Detect changed submission
        id: detect_submission
        run: |
          # Get changed files between HEAD and previous commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Find submissions folders that have changes
          CHANGED_SUBMISSIONS=$(echo "$CHANGED_FILES" | grep "^submissions/" | cut -d'/' -f2 | sort | uniq)
          SUBMISSION_COUNT=$(echo "$CHANGED_SUBMISSIONS" | wc -w)
          
          echo "Changed submissions: $CHANGED_SUBMISSIONS"
          echo "Number of changed submissions: $SUBMISSION_COUNT"
          
          # Check if exactly one submission folder has changes
          if [ "$SUBMISSION_COUNT" -eq 1 ] && [ -n "$CHANGED_SUBMISSIONS" ]; then
            echo "SUBMISSION_FOLDER=$CHANGED_SUBMISSIONS" >> $GITHUB_OUTPUT
            echo "RUN_BUILD=true" >> $GITHUB_OUTPUT
            echo "Will build submission: $CHANGED_SUBMISSIONS"
          else
            echo "RUN_BUILD=false" >> $GITHUB_OUTPUT
            if [ "$SUBMISSION_COUNT" -eq 0 ]; then
              echo "No submission folders changed - skipping build"
            else
              echo "Multiple submission folders changed - skipping build"
            fi
          fi

      # Build and run docker-compose with log output (only if exactly one submission changed)
      - name: Build and run docker-compose
        if: steps.detect_submission.outputs.RUN_BUILD == 'true'
        env:
          SUBMISSION_FOLDER: ${{ steps.detect_submission.outputs.SUBMISSION_FOLDER }}
        run: |
          echo "Building and starting docker-compose services for submission: $SUBMISSION_FOLDER"
          
          # Export the submission folder for docker-compose
          export SUBMISSION_FOLDER=$SUBMISSION_FOLDER
          
          docker compose up --build --abort-on-container-exit
          echo "Docker-compose execution completed."
          
          # Get logs from all services
          echo "=== FINAL LOGS FROM ALL SERVICES ==="
          docker compose logs
          
          # Clean up
          echo "Cleaning up containers and volumes..."
          docker compose down -v
          
          echo "Build and test process completed successfully!"

      # Skip message
      - name: Skip build message
        if: steps.detect_submission.outputs.RUN_BUILD == 'false'
        run: |
          echo "Build skipped - changes must be in exactly one submission folder"
